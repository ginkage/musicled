#include "../src/wavelet.h"

#include <iostream>

std::vector<float> data { 0.39098764440180633, 0.6538029234086782, 0.9046206992006854,
    0.564112169075078, 0.6541605982031828, 0.39006858899059205, 0.3460772054272938,
    0.77803923478657, 0.9914246914137276, 0.41836846138700245, 0.32604008545419194,
    0.38872040695811694, 0.7537009278274582, 0.9011355649710874, 0.6565208812794074,
    0.9577431266548799, 0.24094843167266633, 0.10722262824377438, 0.3501120601289085,
    0.7333251987721184, 0.18349777126797018, 0.10292597996794861, 0.635746492947256,
    0.5871942976947419, 0.9635396333377744, 0.9566705932758286, 0.8820470475315806,
    0.6785840671256944, 0.602311908417801, 0.5300189632566207, 0.07343822260071098,
    0.2290444122485007, 0.06684863608228109, 0.9012989081268276, 0.2156370053772262,
    0.09352111760255455, 0.6347248933601455, 0.34802814304909235, 0.9348362264768468,
    0.5211679700934193, 0.8960515028933536, 0.600446648601844, 0.5788380490471817,
    0.6136125869927269, 0.46904422196918094, 0.770850280520715, 0.3285910083214244,
    0.5089042495335369, 0.6588120464893444, 0.9620520102324076, 0.1850296186278959,
    0.2461307569746486, 0.09857994514072099, 0.0631801849464203, 0.20880989963859709,
    0.598698350634736, 0.8783810744762153, 0.6521556556133367, 0.05948099734177703,
    0.9035271969246446, 0.788324446166113, 0.2415728522024312, 0.7058265615309198,
    0.05892218493288781, 0.08186409678208395, 0.3283421301591267, 0.1605566344566265,
    0.4156369738078518, 0.5990658974940767, 0.8373343388589816, 0.23022487367186983,
    0.2436570663329436, 0.18068875753529934, 0.5854003984320564, 0.5651915357703778,
    0.8214849343881383, 0.05096733146078447, 0.33452239607652434, 0.7446485945795357,
    0.9652189655956805, 0.25030318277092667, 0.851484899646168, 0.7381677500745797,
    0.9914750793128863, 0.25864227981713395, 0.1463382637722349, 0.847927838358717,
    0.6912076286445523, 0.6661365731862711, 0.7230584650719288, 0.15472371388224437,
    0.8807448421153439, 0.11975801511326034, 0.2431908802372894, 0.5660535807167383,
    0.4918608222550286, 0.8028532556820667, 0.4768980563614732, 0.7960269985357586,
    0.964464778600355, 0.3891981906848494, 0.795714572395595, 0.9945317684114429,
    0.9134951979315176, 0.7539313664477646, 0.7474447643767804, 0.2870423039368677,
    0.655865591414879, 0.720815562124008, 0.44602175755593654, 0.1866479990675085,
    0.20381462775232329, 0.7785976400978687, 0.6077794671249436, 0.696325593191715,
    0.7577733156440767, 0.008806415615900343, 0.07047163989183003, 0.93217395063878,
    0.5648675551417952, 0.43314924664975374, 0.5425049828858548, 0.2672759516426295,
    0.2484341208477977, 0.6107377809046787, 0.14723633564349692, 0.32104716075211204,
    0.3594345198239258, 0.593694173201657, 0.05081639280794625, 0.6003758932162877,
    0.952409875753208, 0.2842587785984334, 0.0919456114419277, 0.23655516384706265,
    0.44662718384971867, 0.8273413230692753, 0.8680404957171804, 0.05595200303374792,
    0.8973257447538814, 0.9195272168295964, 0.1746914238802908, 0.17255508715803036,
    0.0724797571822593, 0.8188714939635343, 0.043925868249254374, 0.39698664666256467,
    0.4072511933990902, 0.39938283913458417, 0.8816737353052948, 0.019260406357171744,
    0.9913148128334854, 0.8099206538371182, 0.365964500500791, 0.9415122400757071,
    0.23349535164865365, 0.16929840562434206, 0.8347683543695067, 0.7121256415297275,
    0.7436637567372392, 0.25770663872942545, 0.8660265324635478, 0.7441194290956821,
    0.2735984175508842, 0.3491397783415766, 0.6322988500119413, 0.888360582541382,
    0.26652412861711006, 0.17033050497302615, 0.39858926260309, 0.576110039089232,
    0.6792998936567968, 0.4687664387454966, 0.22429295213179523, 0.9456050405361245,
    0.26173437901326535, 0.8256839059604404, 0.5288415142617048, 0.7238265087694592,
    0.4042653015752192, 0.15950354116462628, 0.6855052566546442, 0.14729561776668942,
    0.9982476356251007, 0.8309936885814164, 0.21894486652313105, 0.8746887359259715,
    0.49235226383951625, 0.38351675879515534, 0.4994871772471978, 0.6692554999466208,
    0.47408560332280847, 0.7300349081661712, 0.050732768163653685, 0.6104697583672579,
    0.6571975761388233, 0.03312128685571192, 0.7169856857084498, 0.7320387558754616,
    0.11375393962134361, 0.6150434644953516, 0.9731289742719138, 0.2773412798522755,
    0.953906151633922, 0.9820561030138294, 0.6019516566334465, 0.2135601857790158,
    0.42690025742046356, 0.4503599376917934, 0.8125664359206921, 0.2522208442750662,
    0.5936234976635565, 0.9207549316513796, 0.6284396042466727, 0.3865421062586325,
    0.30399611915606617, 0.06483532736593156, 0.03468791110966163, 0.8749510643823579,
    0.20177245009913058, 0.5576448556220528, 0.9416795897483735, 0.6753093442594624,
    0.8748241220124354, 0.020030534600262717, 0.49560964342920677, 0.5658429094536425,
    0.07073587780764878, 0.018504163629186388, 0.6466027815970065, 0.5764634330708635,
    0.10555150539584579, 0.8112403273976168, 0.1710291307951438, 0.8981140021160706,
    0.2077665816697395, 0.5259105184380537, 0.5371019760623673, 0.1379677670566426,
    0.5601712983627485, 0.1083733535071536, 0.1014585169689548, 0.6447530868080475,
    0.2289051096854069, 0.690810564664339, 0.12930806128368022, 0.6411742834452188,
    0.0020925648628594695, 0.993719455342906, 0.04186466546627288, 0.06934204474696415,
    0.3996874949253112, 0.9982425456406481, 0.11216402273984272, 0.38032353963610255,
    0.7616606527316652 };

int main()
{
    Wavelet wavelet(data.size(), 8);
    std::vector<decomposition>& decomp = wavelet.decompose(data);
    for (decomposition& d : decomp) {
        std::cout << "approx:";
        for (float& v : d.first) {
            std::cout << ' ' << v;
        }
        std::cout << std::endl;
        std::cout << "detail:";
        for (float& v : d.second) {
            std::cout << ' ' << v;
        }
        std::cout << std::endl;
    }

    float last_approx = decomp[7].first[0], last_detail = decomp[7].second[0];
    float approx = 8.113703714464428, detail = -0.2109971056451759;
    float diff
        = (std::abs((last_approx - approx) / approx) + std::abs((last_detail - detail) / detail))
        / 2;

    std::cout << "Rel. diff: " << diff << std::endl;

    return 0;
}
